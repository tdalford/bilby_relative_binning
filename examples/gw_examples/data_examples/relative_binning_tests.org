#+BEGIN_SRC jupyter-python :session py :kernel igwn-py37
from __future__ import division, print_function
import os
import git
# Go to the correct directory so that we import the bilby we're working on... a slight hack for sure.
repo = git.Repo("./", search_parent_directories=True)
homedir = repo.working_dir
os.chdir(homedir)

import bilby
import numpy as np
import pickle 
#+END_SRC

#+RESULTS:
: <module 'bilby' from '/Users/tommyalford/LIGO_research/bilby_relative_binning_github/bilby_relative_binning/bilby/__init__.py'>

#+BEGIN_SRC jupyter-python :session py :kernel igwn-py37
"""
This tutorial includes advanced specifications
for analysing binary neutron star event data.
Here GW170817 is used as an example.
"""
outdir = 'test_outdir'
label = 'GW170817'
time_of_event = bilby.gw.utils.get_event_time(label)
bilby.core.utils.setup_logger(outdir=outdir, label=label)
# GET DATA FROM INTERFEROMETER
# include 'V1' for appropriate O2 events
interferometer_names = ['H1']#, 'L1', 'V1']
duration = 32
roll_off = 0.2  # how smooth is the transition from no signal
# to max signal in a Tukey Window.
psd_offset = -512  # PSD is estimated using data from
# `center_time+psd_offset` to `center_time+psd_offset + psd_duration`
# This determines the time window used to fetch open data.
psd_duration = 1024
coherence_test = False  # coherence between detectors
filter_freq = None  # low pass filter frequency to cut signal content above
# Nyquist frequency. The condition is 2 * filter_freq >= sampling_frequency


# All keyword arguments are passed to
# `gwpy.timeseries.TimeSeries.fetch_open_data()'
kwargs = {}
# Data are stored by LOSC at 4096 Hz, however
# there may be event-related data releases with a 16384 Hz rate.
kwargs['sample_rate'] = 4096
# For O2 events a "tag" is required to download the data.
# CLN = clean data; C02 = raw data
kwargs['tag'] = 'C02'


# This step generally takes more longer to run. If you want you can pickle this
# data to load it more quickly:  

# interferometers = bilby.gw.detector.get_event_data(
#     label,
#     interferometer_names=interferometer_names,
#     duration=duration,
#     roll_off=roll_off,
#     psd_offset=psd_offset,
#     psd_duration=psd_duration,
#     cache=True,
#     filter_freq=filter_freq,
#     **kwargs)

interferometers = pickle.load(open('interferometer_data.pkl', 'rb'))

# CHOOSE PRIOR FILE
prior = bilby.gw.prior.BNSPriorDict(filename='GW170817.prior')
deltaT = 0.1
prior['geocent_time'] = bilby.core.prior.Uniform(
    minimum=time_of_event - deltaT / 2,
    maximum=time_of_event + deltaT / 2,
    name='geocent_time',
    latex_label='$t_c$',
    unit='$s$')


# GENERATE WAVEFORM
# OVERVIEW OF APPROXIMANTS:
# https://www.lsc-group.phys.uwm.edu/ligovirgo/cbcnote/Waveforms/Overview
duration = None  # duration and sampling frequency will be overwritten
# to match the ones in interferometers.
sampling_frequency = kwargs['sample_rate']
start_time = 0  # set the starting time of the time array
waveform_arguments = {'reference_frequency': 20}

source_model = bilby.gw.source.lal_binary_neutron_star
convert_bns = bilby.gw.conversion.convert_to_lal_binary_neutron_star_parameters
waveform_generator = bilby.gw.WaveformGenerator(
    duration=duration,
    sampling_frequency=sampling_frequency,
    start_time=start_time,
    frequency_domain_source_model=source_model,
    parameter_conversion=convert_bns,
    waveform_arguments=waveform_arguments,)

init_params = {
    'chirp_mass': 1.1977, 'symmetric_mass_ratio': .244, 
    'a_1': 0, 'a_2': 0, 'tilt_1': 0, 'tilt_2': 0,
    'phi_12': 0, 'phi_jl': 0, 'luminosity_distance': 50,
    'dec': 0, 'ra': 0, 'theta_jn': 0, 'psi': 0, 'phase': 0,
    #'lambda_1': 0, 'lambda_2': 0, 
    'geocent_time': 11870882.3848135}

parameter_bounds = {
    'chirp_mass': [1.18, 1.2], 'symmetric_mass_ratio': [.2, .2499],
    'a_1': [0, .05], 'a_2': [0, .05], 'tilt_1': [0, 2 * np.pi],
    'tilt_2': [0, 2 * np.pi], 'phi_12': [0, 2 * np.pi],
    'phi_jl': [0, 2 * np.pi], 'luminosity_distance': [10, 100],
    'dec': [0, 2 * np.pi], 'ra': [0, 2 * np.pi],
    'theta_jn': [0, 2 * np.pi], 'psi': [0, np.pi],
    'phase': [0, 2 * np.pi], 
    #'lambda_1': [0, 5000], 'lambda_2': [0, 5000],
    'geocent_time': [1187008881.3848135, 1187008883.3848135]}

# CHOOSE LIKELIHOOD FUNCTION
# Time marginalisation uses FFT.
# Distance marginalisation uses a look up table calculated at run time.
# Phase marginalisation is done analytically using a Bessel function.
likelihood = bilby.gw.likelihood.RelativeBinningGravitationalWaveTransient(
    interferometers,
    waveform_generator,
    initial_parameters=init_params, 
    parameter_bounds=parameter_bounds, 
    debug=True)

# RUN SAMPLER
# Implemented Samplers:
# LIST OF AVAILABLE SAMPLERS: Run -> bilby.sampler.implemented_samplers
# conversion function = bilby.gw.conversion.generate_all_bns_parameters
npoints = 512
sampler = 'dynesty'
result = bilby.run_sampler(
    likelihood,
    prior,
    outdir=outdir,
    label=label,
    sampler=sampler,
    npoints=npoints,
    use_ratio=False,
    conversion_function=bilby.gw.conversion.generate_all_bns_parameters)

# result.plot_corner()
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
14:10 bilby INFO    : Waveform generator initiated with
  frequency_domain_source_model: bilby.gw.source.lal_binary_neutron_star
  time_domain_source_model: None
  parameter_conversion: bilby.gw.conversion.convert_to_lal_binary_neutron_star_parameters
14:10 bilby INFO    : Running for label 'GW170817', output will be saved to 'test_outdir'
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Performing redundancy check using BBHPriorDict(self).test_redundancy
14:10 bilby INFO    : Using lal version 6.21.0
14:10 bilby INFO    : Using lal git version Branch: None;Tag: lal-v6.21.0;Id: 37caf89936b637993c30b3076fe4b853311873ee;;Builder: Adam Mercer <adam.mercer@ligo.org>;Repository status: CLEAN: All modifications committed
14:10 bilby INFO    : Using lalsimulation version 1.10.1
14:10 bilby INFO    : Using lalsimulation git version Branch: None;Tag: lalsimulation-v1.10.1;Id: cc76ded3b81c7b44559ae02b79b15ad74ae8622c;;Builder: Adam Mercer <adam.mercer@ligo.org>;Repository status: CLEAN: All modifications committed
14:10 bilby INFO    : Search parameters:
14:10 bilby INFO    :   chirp_mass = Uniform(minimum=0.87, maximum=1.74, name='chirp_mass', latex_label='$\\mathcal{M}$', unit='$M_{\\odot}$', boundary=None)
14:10 bilby INFO    :   mass_ratio = Uniform(minimum=0.125, maximum=1.0, name='mass_ratio', latex_label='$q$', unit=None, boundary=None)
14:10 bilby INFO    :   a_1 = Uniform(minimum=0, maximum=0.05, name='a_1', latex_label='$a_1$', unit=None, boundary=None)
14:10 bilby INFO    :   a_2 = Uniform(minimum=0, maximum=0.05, name='a_2', latex_label='$a_2$', unit=None, boundary=None)
14:10 bilby INFO    :   tilt_1 = Sine(name='tilt_1', latex_label='$\\theta_1$', unit=None, minimum=0, maximum=3.141592653589793, boundary=None)
14:10 bilby INFO    :   tilt_2 = Sine(name='tilt_2', latex_label='$\\theta_2$', unit=None, minimum=0, maximum=3.141592653589793, boundary=None)
14:10 bilby INFO    :   phi_12 = Uniform(minimum=0, maximum=6.283185307179586, name='phi_12', latex_label='$\\Delta\\phi$', unit=None, boundary='periodic')
14:10 bilby INFO    :   phi_jl = Uniform(minimum=0, maximum=6.283185307179586, name='phi_jl', latex_label='$\\phi_{JL}$', unit=None, boundary='periodic')
14:10 bilby INFO    :   luminosity_distance = UniformSourceFrame(minimum=10.0, maximum=100.0, cosmology=FlatLambdaCDM(name="Planck15", H0=67.7 km / (Mpc s), Om0=0.307, Tcmb0=2.725 K, Neff=3.05, m_nu=[0.   0.   0.06] eV, Ob0=0.0486), name='luminosity_distance', latex_label='$d_L$', unit=Unit("Mpc"), boundary=None)
14:10 bilby INFO    :   dec = Cosine(name='dec', latex_label='$\\mathrm{DEC}$', unit=None, minimum=-1.5707963267948966, maximum=1.5707963267948966, boundary=None)
14:10 bilby INFO    :   ra = Uniform(minimum=0, maximum=6.283185307179586, name='ra', latex_label='$\\mathrm{RA}$', unit=None, boundary='periodic')
14:10 bilby INFO    :   theta_jn = Sine(name='theta_jn', latex_label='$\\theta_{JN}$', unit=None, minimum=0, maximum=3.141592653589793, boundary=None)
14:10 bilby INFO    :   psi = Uniform(minimum=0, maximum=3.141592653589793, name='psi', latex_label='$\\psi$', unit=None, boundary='periodic')
14:10 bilby INFO    :   phase = Uniform(minimum=0, maximum=6.283185307179586, name='phase', latex_label='$\\phi$', unit=None, boundary='periodic')
14:10 bilby INFO    :   lambda_tilde = Uniform(minimum=0, maximum=1000, name='lambda_tilde', latex_label='$\\tilde{\\Lambda}$', unit=None, boundary=None)
14:10 bilby INFO    :   delta_lambda_tilde = Uniform(minimum=-5000, maximum=5000, name='delta_lambda_tilde', latex_label='$\\delta\\tilde{\\Lambda}$', unit=None, boundary=None)
14:10 bilby INFO    :   geocent_time = Uniform(minimum=1187008882.3500001, maximum=1187008882.45, name='geocent_time', latex_label='$t_c$', unit='$s$', boundary=None)
Bin setup completed. Number of bins = 61
fiducial waveforms obtained!
summary data obtained!
iter: 0
computing maxL parameters...
new polarizations:  {'plus': array([ 0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
        0.00000000e+00+0.00000000e+00j,
       -2.61073300e-23-4.17731948e-23j,
       -4.49521348e-23-1.44473800e-23j,
       -3.29619312e-23+3.11801118e-23j,
       -4.35206272e-23+4.00580309e-24j,
        4.20557680e-23+8.97796131e-25j,
        3.33586934e-23-2.27443389e-23j,
        3.84495664e-23+6.18844949e-24j,
        3.19073469e-23+2.02043341e-23j,
       -5.79282803e-24-3.58677393e-23j,
       -3.48206790e-23+5.42795034e-24j,
        1.52571403e-23-3.05088478e-23j,
        1.27459006e-23+3.04700517e-23j,
        2.97524428e-23-1.19981957e-23j,
       -2.56585193e-23+1.75964453e-23j,
        2.16822247e-23-2.10371904e-23j,
       -2.22512860e-23-1.92783435e-23j,
        1.63311852e-23-2.33691726e-23j,
        5.69249844e-24-2.73169522e-23j,
       -2.12935869e-23-1.67079300e-23j,
       -2.62644499e-23+2.39413706e-24j,
       -2.34170789e-23-1.08986967e-23j,
        2.50629007e-23-8.41902798e-25j,
        1.84199750e-23-1.61238201e-23j,
       -1.43058075e-23+1.92919075e-23j,
       -2.33768444e-23+7.43306473e-25j,
       -1.92289022e-23+1.22468339e-23j,
        9.66224272e-24+2.01881020e-23j,
        1.58911934e-23-1.51224092e-23j,
       -1.86105232e-23-1.05187461e-23j,
       -1.26001063e-23+1.66691119e-23j,
       -9.97702375e-26+2.05390120e-23j,
       -9.64928631e-24+1.77176421e-23j,
       -1.25411556e-23-1.52109473e-23j,
        2.32102404e-24+1.91247811e-23j,
        1.17402090e-23+1.48266662e-23j]), 'cross': array([ 0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        0.00000000e+00-0.00000000e+00j,
        1.70201696e-23-1.11969586e-23j,
        5.49921188e-24-1.87975322e-23j,
       -1.35422373e-23-1.34385046e-23j,
       -2.13736830e-24-1.86471885e-23j,
       -5.25147074e-25+1.80819444e-23j,
        9.23315319e-24+1.39652294e-23j,
       -2.10910043e-24+1.60336671e-23j,
       -8.64023794e-24+1.38504327e-23j,
        1.48468439e-23-2.21307422e-24j,
       -2.77855133e-24-1.46976466e-23j,
        1.27475384e-23+6.70170862e-24j,
       -1.25755814e-23+5.76185885e-24j,
        4.83310556e-24+1.27125627e-23j,
       -7.77123275e-24-1.05357004e-23j,
        8.61365695e-24+9.25380935e-24j,
        8.00100390e-24-9.76996510e-24j,
        9.56040589e-24+6.71440871e-24j,
        1.18033922e-23+2.50248308e-24j,
        6.65948188e-24-9.09990673e-24j,
       -7.82160483e-25-1.09341533e-23j,
        4.62926360e-24-1.01924896e-23j,
        6.77775435e-25+1.03719822e-23j,
        6.54013462e-24+7.76161726e-24j,
       -8.35889973e-24-6.20139845e-24j,
       -6.73775984e-25-9.82979828e-24j,
       -5.00721692e-24-7.85748122e-24j,
       -8.67821402e-24+3.92365064e-24j,
        6.67044490e-24+6.76588976e-24j,
        4.10324876e-24-7.90329552e-24j,
       -6.79537346e-24-5.17780356e-24j,
       -8.71286940e-24-2.46283416e-25j,
       -7.73017410e-24-4.12419022e-24j,
        6.23525079e-24-5.54718943e-24j,
       -7.79989087e-24+1.09843913e-24j,
       -6.21171983e-24+4.73224801e-24j])}
ratios = {'plus': array([       -inf       -infj,        -inf       -infj,
               inf       -infj,        -inf       +infj,
              -inf       -infj,         inf       +infj,
              -inf       +infj,        -inf       -infj,
              -inf       +infj,        -inf       -infj,
               inf       -infj,        -inf       -infj,
              -inf       +infj,         inf       -infj,
               inf       -infj,         inf       +infj,
               inf       -infj,        -inf       +infj,
              -inf       +infj,        -inf       -infj,
              -inf       -infj,        -inf       +infj,
               inf       -infj,        -inf       -infj,
              -inf       +infj,         inf       -infj,
              -inf       +infj, -0.00622872+0.055041j  ,
        0.02227309+0.04504593j,  0.03036414-0.03474809j,
       -0.03334566+0.02687375j,  0.03158237-0.02489667j,
       -0.03437731-0.01672116j, -0.00908678-0.03530216j,
       -0.01773129-0.02996202j,  0.02306901-0.02458834j,
        0.01340317-0.02967032j,  0.02947314+0.01151895j,
        0.00974354+0.02929287j,  0.02193272-0.02065528j,
        0.00734735-0.02861323j, -0.01760785-0.02305561j,
        0.00880379+0.02706295j,  0.00465127+0.02777352j,
       -0.02744802-0.00311744j,  0.02225669-0.01597599j,
        0.00719228+0.02612221j, -0.00698381+0.02577134j,
        0.02637253+0.00334132j, -0.00318857+0.0261639j ,
        0.02369706-0.01078128j,  0.02163653-0.01430602j,
        0.02078403+0.0153673j , -0.02339307+0.01039553j,
        0.01190732-0.02245562j,  0.00596033+0.02469686j,
       -0.02507323-0.00365986j, -0.00749564-0.02400907j,
       -0.00842908-0.02353705j, -0.02386625+0.00744157j,
        0.02228855-0.01135389j,  0.02239229+0.01096007j]), 'cross': array([       -inf       +infj,        -inf       +infj,
              -inf       -infj,         inf       +infj,
              -inf       +infj,         inf       -infj,
               inf       +infj,        -inf       +infj,
               inf       +infj,        -inf       +infj,
              -inf       -infj,        -inf       +infj,
               inf       +infj,        -inf       -infj,
              -inf       -infj,         inf       -infj,
              -inf       -infj,         inf       +infj,
               inf       +infj,        -inf       +infj,
              -inf       +infj,         inf       +infj,
              -inf       -infj,        -inf       +infj,
               inf       +infj,        -inf       -infj,
               inf       +infj,  0.01815716-0.13269836j,
       -0.05081528-0.10997479j, -0.07478904+0.08031477j,
        0.07902427-0.06082603j, -0.07299404+0.05845757j,
        0.08347156+0.03914096j,  0.01942621+0.08560824j,
        0.04055325+0.06959116j, -0.0551092 +0.06018803j,
       -0.03381246+0.06885067j, -0.07034733-0.02586056j,
       -0.02091296-0.07068162j, -0.05074988+0.04974753j,
       -0.01978921+0.06735896j,  0.04320863+0.05421137j,
       -0.01876649-0.06363966j, -0.01150903-0.06775117j,
        0.0635021 +0.00698901j, -0.05467746+0.03653296j,
       -0.01852529-0.06249739j,  0.0166644 -0.05931024j,
       -0.06333971-0.01007235j,  0.00650109-0.06323839j,
       -0.05467693+0.02489074j, -0.05257053+0.03205471j,
       -0.05084508-0.03761384j,  0.05442849-0.02562015j,
       -0.02840441+0.05135229j, -0.01219124-0.05975901j,
        0.06135949+0.00871542j,  0.01898176+0.05614632j,
        0.01894261+0.05436265j,  0.05699811-0.01544838j,
       -0.05503442+0.02672102j, -0.05471759-0.02552405j])}
/Users/tommyalford/LIGO_research/bilby_relative_binning_github/bilby_relative_binning/bilby/gw/likelihood.py:1727: RuntimeWarning: divide by zero encountered in true_divide
  new_polarizations[mode])) for mode in (
#+end_example
# [goto error]
: An exception has occurred, use %tb to see the full traceback.
: 
: SystemExit
: /Users/tommyalford/anaconda/envs/igwn-py37/lib/python3.7/site-packages/IPython/core/interactiveshell.py:2886: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.
:   warn("To exit: use 'exit', 'quit', or Ctrl-D.", stacklevel=1)
:END:
* Other Checks
#+begin_src jupyter-python :session py :kernel igwn-py37
likelihood.bin_inds
#+end_src
#+RESULTS:
: array([  640,   664,   688,   715,   745,   778,   814,   854,
:          899,   950,  1007,  1073,  1150,  1239,  1344,  1470,
:         1621,  1808,  2039,  2330,  2697,  3161,  3736,  4431,
:         5236,  6126,  7073,  8047,  9029, 10004, 10962, 11900,
:        12815, 13706, 14573, 15418, 16239, 17040, 17820, 18581,
:        19323, 20049, 20758, 21451, 22131, 22796, 23448, 24088,
:        24715, 25331, 25937, 26532, 27116, 27692, 28259, 28817,
:        29367, 29908, 30443, 30969, 31488, 32000])


#+BEGIN_SRC jupyter-python :session py :kernel python3
freq_mas = np.array([True, True, True, True, True])
test = np.array([1, 2, 3, 4, 5])
test[freq_mas]
#+END_SRC

#+RESULTS:
: array([1, 2, 3, 4, 5])

#+BEGIN_SRC jupyter-python :session py :kernel python3
test = freq_mas.copy()
test[[1, 3]] = True
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python :session py :kernel python3
np.array([1, 2, 3, 4, 5])[test]
#+END_SRC

#+RESULTS:
: array([2, 4])


#+BEGIN_SRC jupyter-python :session py :kernel igwn-py37
likelihood.bin_freqs
#+END_SRC

#+RESULTS:
#+begin_example
array([  20.        ,   20.7252145 ,   21.48962979,
         22.33244665,   23.27326547,   24.29248585,
         25.40970819,   26.66413328,   28.07536151,
         29.66299326,   31.46622932,   33.52427049,
         35.91551831,   38.69877398,   41.99163983,
         45.91171823,   50.6550131 ,   56.47632953,
         63.70887418,   72.78385568,   84.26968539,
         98.75437509,  116.74753495,  138.4647693 ,
        163.61207224,  191.4250285 ,  221.00202004,
        251.46102922,  282.13564271,  312.59465189,
        342.54405088,  371.84663693,  400.44360887,
        428.29576592,  455.40310806,  481.7852357 ,
        507.46174923,  532.47184944,  556.85473709,
        580.6300126 ,  603.83687674,  626.51453029,
        648.66297326,  670.34100682,  691.56823136,
        712.36424728,  732.72905458,  752.72145443,
        772.32184644,  791.58903178,  810.50341007,
        829.10418208,  847.37174743,  865.3649073 ,
        883.08366167,  900.50841017,  917.69795396,
        934.61309226,  951.31262625,  967.75735515,
        983.98647973, 1000.        ])
#+end_example


#+BEGIN_SRC jupyter-python :session py :kernel igwn-py37
np.invert(interferometers[0].strain_data.frequency_mask).sum()
#+END_SRC

#+RESULTS:
: 0

#+BEGIN_SRC jupyter-python :session py :kernel igwn-py37
interferometers[0].strain_data.frequency_array
#+END_SRC

#+RESULTS:
: array([0.00000000e+00, 3.12500000e-02, 6.25000000e-02, ...,
:        2.04793750e+03, 2.04796875e+03, 2.04800000e+03])
:END:

